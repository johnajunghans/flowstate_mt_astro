{
  "version": 3,
  "sources": ["../../astro/dist/jsx-runtime/index.js"],
  "sourcesContent": ["import { Fragment, markHTMLString } from \"../runtime/server/index.js\";\nconst AstroJSX = \"astro:jsx\";\nconst Empty = Symbol(\"empty\");\nconst toSlotName = (str) => str.trim().replace(/[-_]([a-z])/g, (_, w) => w.toUpperCase());\nfunction isVNode(vnode) {\n  return vnode && typeof vnode === \"object\" && vnode[AstroJSX];\n}\nfunction transformSlots(vnode) {\n  if (typeof vnode.type === \"string\")\n    return vnode;\n  const slots = {};\n  if (isVNode(vnode.props.children)) {\n    const child = vnode.props.children;\n    if (!isVNode(child))\n      return;\n    if (!(\"slot\" in child.props))\n      return;\n    const name = toSlotName(child.props.slot);\n    slots[name] = [child];\n    slots[name][\"$$slot\"] = true;\n    delete child.props.slot;\n    delete vnode.props.children;\n  }\n  if (Array.isArray(vnode.props.children)) {\n    vnode.props.children = vnode.props.children.map((child) => {\n      if (!isVNode(child))\n        return child;\n      if (!(\"slot\" in child.props))\n        return child;\n      const name = toSlotName(child.props.slot);\n      if (Array.isArray(slots[name])) {\n        slots[name].push(child);\n      } else {\n        slots[name] = [child];\n        slots[name][\"$$slot\"] = true;\n      }\n      delete child.props.slot;\n      return Empty;\n    }).filter((v) => v !== Empty);\n  }\n  Object.assign(vnode.props, slots);\n}\nfunction markRawChildren(child) {\n  if (typeof child === \"string\")\n    return markHTMLString(child);\n  if (Array.isArray(child))\n    return child.map((c) => markRawChildren(c));\n  return child;\n}\nfunction transformSetDirectives(vnode) {\n  if (!(\"set:html\" in vnode.props || \"set:text\" in vnode.props))\n    return;\n  if (\"set:html\" in vnode.props) {\n    const children = markRawChildren(vnode.props[\"set:html\"]);\n    delete vnode.props[\"set:html\"];\n    Object.assign(vnode.props, { children });\n    return;\n  }\n  if (\"set:text\" in vnode.props) {\n    const children = vnode.props[\"set:text\"];\n    delete vnode.props[\"set:text\"];\n    Object.assign(vnode.props, { children });\n    return;\n  }\n}\nfunction createVNode(type, props) {\n  const vnode = {\n    [AstroJSX]: true,\n    type,\n    props: props ?? {}\n  };\n  transformSetDirectives(vnode);\n  transformSlots(vnode);\n  return vnode;\n}\nexport {\n  AstroJSX,\n  Fragment,\n  isVNode,\n  createVNode as jsx,\n  createVNode as jsxDEV,\n  createVNode as jsxs,\n  transformSlots\n};\n"],
  "mappings": ";;;;;;;AACA,IAAM,WAAW;AACjB,IAAM,QAAQ,OAAO,OAAO;AAC5B,IAAM,aAAa,CAAC,QAAQ,IAAI,KAAK,EAAE,QAAQ,gBAAgB,CAAC,GAAG,MAAM,EAAE,YAAY,CAAC;AACxF,SAAS,QAAQ,OAAO;AACtB,SAAO,SAAS,OAAO,UAAU,YAAY,MAAM;AACrD;AACA,SAAS,eAAe,OAAO;AAC7B,MAAI,OAAO,MAAM,SAAS;AACxB,WAAO;AACT,QAAM,QAAQ,CAAC;AACf,MAAI,QAAQ,MAAM,MAAM,QAAQ,GAAG;AACjC,UAAM,QAAQ,MAAM,MAAM;AAC1B,QAAI,CAAC,QAAQ,KAAK;AAChB;AACF,QAAI,EAAE,UAAU,MAAM;AACpB;AACF,UAAM,OAAO,WAAW,MAAM,MAAM,IAAI;AACxC,UAAM,QAAQ,CAAC,KAAK;AACpB,UAAM,MAAM,YAAY;AACxB,WAAO,MAAM,MAAM;AACnB,WAAO,MAAM,MAAM;AAAA,EACrB;AACA,MAAI,MAAM,QAAQ,MAAM,MAAM,QAAQ,GAAG;AACvC,UAAM,MAAM,WAAW,MAAM,MAAM,SAAS,IAAI,CAAC,UAAU;AACzD,UAAI,CAAC,QAAQ,KAAK;AAChB,eAAO;AACT,UAAI,EAAE,UAAU,MAAM;AACpB,eAAO;AACT,YAAM,OAAO,WAAW,MAAM,MAAM,IAAI;AACxC,UAAI,MAAM,QAAQ,MAAM,KAAK,GAAG;AAC9B,cAAM,MAAM,KAAK,KAAK;AAAA,MACxB,OAAO;AACL,cAAM,QAAQ,CAAC,KAAK;AACpB,cAAM,MAAM,YAAY;AAAA,MAC1B;AACA,aAAO,MAAM,MAAM;AACnB,aAAO;AAAA,IACT,CAAC,EAAE,OAAO,CAAC,MAAM,MAAM,KAAK;AAAA,EAC9B;AACA,SAAO,OAAO,MAAM,OAAO,KAAK;AAClC;AACA,SAAS,gBAAgB,OAAO;AAC9B,MAAI,OAAO,UAAU;AACnB,WAAO,eAAe,KAAK;AAC7B,MAAI,MAAM,QAAQ,KAAK;AACrB,WAAO,MAAM,IAAI,CAAC,MAAM,gBAAgB,CAAC,CAAC;AAC5C,SAAO;AACT;AACA,SAAS,uBAAuB,OAAO;AACrC,MAAI,EAAE,cAAc,MAAM,SAAS,cAAc,MAAM;AACrD;AACF,MAAI,cAAc,MAAM,OAAO;AAC7B,UAAM,WAAW,gBAAgB,MAAM,MAAM,WAAW;AACxD,WAAO,MAAM,MAAM;AACnB,WAAO,OAAO,MAAM,OAAO,EAAE,SAAS,CAAC;AACvC;AAAA,EACF;AACA,MAAI,cAAc,MAAM,OAAO;AAC7B,UAAM,WAAW,MAAM,MAAM;AAC7B,WAAO,MAAM,MAAM;AACnB,WAAO,OAAO,MAAM,OAAO,EAAE,SAAS,CAAC;AACvC;AAAA,EACF;AACF;AACA,SAAS,YAAY,MAAM,OAAO;AAChC,QAAM,QAAQ;AAAA,IACZ,CAAC,WAAW;AAAA,IACZ;AAAA,IACA,OAAO,wBAAS,CAAC;AAAA,EACnB;AACA,yBAAuB,KAAK;AAC5B,iBAAe,KAAK;AACpB,SAAO;AACT;",
  "names": []
}
